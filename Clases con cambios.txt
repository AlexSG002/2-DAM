GameActivity:
package edu.pmdm.frogger.activities;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.ImageButton;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.view.WindowCompat;

import java.util.HashMap;
import java.util.Map;

import edu.pmdm.frogger.R;
import edu.pmdm.frogger.firebase.FirebaseAuthManager;
import edu.pmdm.frogger.firebase.FirestoreManager;
import edu.pmdm.frogger.game.GameEngine;
import edu.pmdm.frogger.game.GameEventsListener;
import edu.pmdm.frogger.game.Juego;
import edu.pmdm.frogger.utils.GameAudioManager;

public class GameActivity extends AppCompatActivity implements GameEventsListener {

    private Juego juegoView;
    private GameEngine gameEngine;

    private ImageButton btnLeft, btnUp, btnRight;

    private int level;            // nivel que estamos jugando
    private int userCurrentLevel; // nivel actual del usuario en Firebase
    private GameAudioManager gam = new GameAudioManager();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // Modo fullscreen inmersivo
        WindowCompat.setDecorFitsSystemWindows(getWindow(), false);
        View decorView = getWindow().getDecorView();
        decorView.setSystemUiVisibility(
                View.SYSTEM_UI_FLAG_FULLSCREEN
                        | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                        | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY
        );

        setContentView(R.layout.activity_game);

        // Recuperar datos (por ejemplo, si los pasaste en el Intent)
        // Si no, pon valores por defecto
        level = getIntent().getIntExtra("level", 1);
        userCurrentLevel = getIntent().getIntExtra("userCurrentLevel", 1);

        // Referencia al SurfaceView
        juegoView = findViewById(R.id.gameView);
        // Configurar el mapa según el nivel recibido
        juegoView.setLevel(level);

        // Botones
        btnLeft  = findViewById(R.id.btnLeft);
        btnUp    = findViewById(R.id.btnUp);
        btnRight = findViewById(R.id.btnRight);

        // Crear GameEngine con la interfaz
        gameEngine = new GameEngine(
                this,         // contexto
                level,
                userCurrentLevel,
                this          // GameEventsListener
        );
        // Pasar el gameEngine a juegoView
        juegoView.setGameEngine(gameEngine);

        // Listeners de botones
        btnLeft.setOnClickListener(v -> juegoView.movePlayerLeft());
        btnUp.setOnClickListener(v -> juegoView.movePlayerUp());
        btnRight.setOnClickListener(v -> juegoView.movePlayerRight());
    }

    // ============ Implementación GameEventsListener ============

    /**
     * Llamado cuando la rana llega a la última fila (victoria).
     * @param shouldIncrementLevel true => hay que subir currentLevel en Firebase.
     */
    @Override
    public void onGameWon(boolean shouldIncrementLevel) {
        // Bloquear botones para que no se siga moviendo
        setButtonsEnabled(false);

        if (shouldIncrementLevel) {
            // Subir currentLevel en Firebase
            // Obtener el UID del usuario logueado
            String uid = FirebaseAuthManager
                    .getInstance(this)
                    .getCurrentUser()
                    .getUid();

            int newLevel = userCurrentLevel + 1;

            Map<String, Object> updates = new HashMap<>();
            updates.put("currentLevel", newLevel);

            FirestoreManager.getInstance().updateUserFields(uid, updates)
                    .addOnSuccessListener(aVoid -> {
                        userCurrentLevel = newLevel;
                        showVictoryAlert(true);
                    })
                    .addOnFailureListener(e -> {
                        // Si falla la subida de nivel, igualmente mostramos la alerta
                        showVictoryAlert(false);
                    });
        } else {
            showVictoryAlert(false);
        }
    }

    /**
     * Llamado cuando el usuario se queda sin vidas.
     */
    @Override
    public void onGameLost() {
        // Asegurarse de que se ejecute en el hilo principal
        runOnUiThread(() -> {
            setButtonsEnabled(false);
            showDefeatAlert();
        });
    }

    /**
     * Bloquear o desbloquear botones cuando la rana muere y reaparece.
     */
    @Override
    public void onButtonsBlocked(boolean blocked) {
        // Ejecutar la actualización de la UI en el hilo principal
        runOnUiThread(() -> setButtonsEnabled(!blocked));
    }

    // ============ Alertas de Victoria / Derrota ============

    private void showVictoryAlert(boolean levelIncremented) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        String msg = "¡Has ganado!";
        if(level == 1){
            gam.stopLevelOneTheme();
        }
        if(level == 2){
            gam.stopLevelTwoTheme();
        }
        if(level == 3){
            gam.stopLevelThreeTheme();
        }
        if (levelIncremented) {
            msg += "\n¡Se ha desbloqueado el siguiente nivel!";
        }
        builder.setTitle("Victoria")
                .setMessage(msg)
                .setPositiveButton("Reintentar", (dialog, which) -> {
                    // Reiniciar la Activity
                    recreate();
                })
                .setNegativeButton("Menú Principal", (dialog, which) -> {
                    startActivity(new Intent(this, MainActivity.class));
                    finish();
                })
                .show();
    }

    private void showDefeatAlert() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Derrota")
                .setMessage("Te has quedado sin vidas. ¿Deseas reintentar o volver al menú?")
                .setPositiveButton("Reintentar", (dialog, which) -> {
                    // Reiniciar la Activity
                    recreate();
                })
                .setNegativeButton("Menú Principal", (dialog, which) -> {
                    startActivity(new Intent(this, MainActivity.class));
                    finish();
                })
                .show();
    }

    private void setButtonsEnabled(boolean enabled) {
        btnLeft.setEnabled(enabled);
        btnUp.setEnabled(enabled);
        btnRight.setEnabled(enabled);
    }
}

MainActivity:
package edu.pmdm.frogger.activities;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.widget.TextView;

import androidx.activity.EdgeToEdge;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;

import com.google.firebase.firestore.DocumentSnapshot;

import java.util.HashMap;
import java.util.Map;

import edu.pmdm.frogger.R;
import edu.pmdm.frogger.firebase.FirebaseAuthManager;
import edu.pmdm.frogger.firebase.FirestoreManager;
import edu.pmdm.frogger.utils.GameAudioManager;

/**
 * Actividad principal de la aplicación Frogger.
 * <p>
 * Esta clase se encarga de:
 * <ul>
 *   <li>Configurar la interfaz de usuario para una experiencia edge-to-edge.</li>
 *   <li>Obtener o crear los datos del usuario en Firestore.</li>
 *   <li>Actualizar la UI con el nombre del usuario, nivel actual y puntuación.</li>
 *   <li>Permitir la navegación a GameActivity y LevelSelectionActivity.</li>
 *   <li>Gestionar el cierre de sesión.</li>
 * </ul>
 * </p>
 */
public class MainActivity extends AppCompatActivity {

    private static final String TAG = "FroggerMain";
    private FirebaseAuthManager authManager;
    private FirestoreManager firestoreManager;
    // Variable global para almacenar el nivel actual del usuario
    private int currentLevel = 1;
    // Variable global para almacenar la puntuación actual del usuario
    private int currentScore = 0;
    private GameAudioManager gam = new GameAudioManager();
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // Habilita la interfaz edge-to-edge
        EdgeToEdge.enable(this);
        setContentView(R.layout.activity_main);

        // Ajusta los insets para que la UI se posicione correctamente
        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
            return insets;
        });

        gam.mainThemeSong(this);

        // Inicializa los gestores de autenticación y Firestore
        authManager = FirebaseAuthManager.getInstance(this);
        firestoreManager = FirestoreManager.getInstance();

        // Obtiene o crea los datos del usuario en Firestore
        getUserData();

        // Listener para el botón de LOGOUT
        findViewById(R.id.btnGoogleLogout).setOnClickListener(v -> signOut());

        // Listener para el botón PLAY GAME: envía a GameActivity el nivel actual del usuario
        findViewById(R.id.playGame).setOnClickListener(v -> {
            Intent intent = new Intent(MainActivity.this, GameActivity.class);
            intent.putExtra("level", currentLevel);
            startActivity(intent);
            gam.stopMainThemeSong();
        });

        // Listener para el botón LEVELS: envía a LevelSelectionActivity para la selección de niveles
        findViewById(R.id.levels).setOnClickListener(v -> {
            Intent intent = new Intent(MainActivity.this, LevelSelectionActivity.class);
            startActivity(intent);
        });


    }

    /**
     * Obtiene el documento del usuario en Firestore. Si no existe, lo crea con datos por defecto.
     * <p>
     * Los datos por defecto incluyen:
     * <ul>
     *   <li>displayName: nombre del usuario autenticado.</li>
     *   <li>email: correo electrónico del usuario autenticado.</li>
     *   <li>currentLevel: nivel inicial (1).</li>
     *   <li>score: puntuación inicial (0).</li>
     * </ul>
     * </p>
     */
    private void getUserData() {
        String uid = authManager.getCurrentUser().getUid();
        firestoreManager.getUser(uid, task -> {
            if (task.isSuccessful()) {
                DocumentSnapshot document = task.getResult();
                if (document != null && document.exists()) {
                    // Si el documento existe, actualiza la UI y guarda el nivel y puntuación actuales del usuario
                    String displayName = document.getString("displayName");
                    Long levelLong = document.getLong("currentLevel");
                    currentLevel = (levelLong != null) ? levelLong.intValue() : 1;
                    Long scoreLong = document.getLong("score");
                    currentScore = (scoreLong != null) ? scoreLong.intValue() : 0;
                    updateUIWithUserData(displayName, currentLevel, currentScore);
                } else {
                    // Si el documento no existe, crea un nuevo documento con datos por defecto
                    Map<String, Object> userData = new HashMap<>();
                    userData.put("displayName", authManager.getCurrentUser().getDisplayName());
                    userData.put("email", authManager.getCurrentUser().getEmail());
                    userData.put("currentLevel", 1); // Nivel inicial
                    userData.put("score", 0);        // Puntuación inicial

                    firestoreManager.createOrUpdateUser(uid, userData)
                            .addOnCompleteListener(createTask -> {
                                if (createTask.isSuccessful()) {
                                    Log.d(TAG, "Usuario creado exitosamente en Firestore");
                                    updateUIWithUserData(authManager.getCurrentUser().getDisplayName(), 1, 0);
                                } else {
                                    Log.e(TAG, "Error al crear usuario", createTask.getException());
                                }
                            });
                }
            } else {
                Log.e(TAG, "Error al obtener datos de usuario", task.getException());
            }
        });
    }

    /**
     * Actualiza la interfaz de usuario con la información obtenida del usuario.
     *
     * @param displayName Nombre del usuario para mostrar en la UI.
     * @param level       Nivel actual del usuario.
     * @param score       Puntuación actual del usuario.
     */
    @SuppressLint("SetTextI18n")
    private void updateUIWithUserData(String displayName, int level, int score) {
        // Actualiza el TextView con el nombre del usuario
        TextView tvUserName = findViewById(R.id.tvUserName);
        if (displayName != null) {
            tvUserName.setText("Bienvenido " + displayName);
        }
        // Actualiza el TextView con el nivel actual
        TextView tvCurrentLevel = findViewById(R.id.tvCurrentLevel);
        tvCurrentLevel.setText("Nivel: " + level);
        // Actualiza el TextView con la puntuación actual
        TextView tvCurrentScore = findViewById(R.id.tvCurrentScore);
        tvCurrentScore.setText("Puntuación: " + score);
    }

    /**
     * Cierra la sesión del usuario y redirige a LoginActivity.
     */
    private void signOut() {
        authManager.signOut(this, task -> {
            if (task.isSuccessful()) {
                Log.d(TAG, "Google sign out successful");
            }
            // Redirige a LoginActivity
            Intent intent = new Intent(MainActivity.this, LoginActivity.class);
            startActivity(intent);
            finish();
        });
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        gam.stopMainThemeSong();
    }

    @Override
    protected void onPause() {
        super.onPause();
        gam.stopMainThemeSong();
    }

}

GameEngine:
package edu.pmdm.frogger.game;

import android.content.Context;
import android.graphics.Canvas;
import android.util.Log;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import edu.pmdm.frogger.R;
import edu.pmdm.frogger.utils.GameAudioManager;

public class GameEngine {

    private static final String TAG = "GameEngine";

    private PlayerFrog player;
    private List<Obstacle> obstacles;
    private CollisionManager collisionManager;
    private Path path; // Camino seguro
    private GameAudioManager gam;

    // Líneas para la rana
    private final float[] frogLines = generateLines(0.92f, 0.02f, 13);
    // Líneas para obstáculos (carretera)
    private final float[] roadLines = generateLines(0.82f, 0.50f, 5);
    // Líneas para la zona del camino
    private final float[] pathLines = generateLines(0.43f, 0.08f, 5);

    private int frogLineIndex = 0;
    private int[] columnsX = new int[5];
    private int frogColumnIndex = 2;

    private int screenWidth;
    private int mapHeight;

    private int lives = 3;
    private boolean gameWon = false;
    private boolean gameOver = false;
    private int level;
    private int userCurrentLevel;
    private GameEventsListener listener;
    private Context context;

    public GameEngine(Context context, int level, int userCurrentLevel, GameEventsListener listener) {
        this.collisionManager = new CollisionManager();
        this.player = new PlayerFrog(context);
        // Registrar el listener para cuando termine la animación de muerte:
        player.setDeathAnimationListener(new PlayerFrog.DeathAnimationListener() {
            @Override
            public void onDeathAnimationFinished() {
                resetAfterDeath();
            }
        });
        this.obstacles = new ArrayList<>();
        this.level = level;
        this.userCurrentLevel = userCurrentLevel;
        this.listener = listener;
        this.context = context;
        this.gam = new GameAudioManager();
    }

    private float[] generateLines(float start, float end, int count) {
        float[] lines = new float[count];
        float step = (start - end) / (count - 1);
        for (int i = 0; i < count; i++) {
            lines[i] = start - i * step;
        }
        return lines;
    }

    public void configurePositions(int screenWidth, int mapHeight) {
        this.screenWidth = screenWidth;
        this.mapHeight = mapHeight;

        player.configureScale(mapHeight, 0.06f);

        int columnWidth = screenWidth / 5;
        for (int i = 0; i < 5; i++) {
            columnsX[i] = i * columnWidth + (columnWidth / 2);
        }

        frogLineIndex = 0;
        frogColumnIndex = 2;
        float frogScaledWidth = player.getScaledWidth();
        float frogX = columnsX[frogColumnIndex] - (frogScaledWidth / 2f);
        float frogY = frogLines[frogLineIndex] * mapHeight;
        player.storeInitialPosition((int) frogX, (int) frogY);

        resetObstacles();

        // Crear el camino seguro utilizando la configuración para el nivel.
        Path.PathConfig config = Path.getPathConfigForLevel(level);
        path = new Path(player.context, screenWidth, mapHeight, config);

        gameWon = false;
        gameOver = false;
        lives = 3;
    }

    private void resetObstacles() {
        obstacles.clear();
        Random rand = new Random();

        int drawableObstacle;
        switch (level) {
            case 1:
                drawableObstacle = R.drawable.cars;
                break;
            case 2:
                drawableObstacle = R.drawable.desert_cars;
                break;
            case 3:
                drawableObstacle = R.drawable.space_cars;
                break;
            default:
                drawableObstacle = R.drawable.cars;
        }

        for (float line : roadLines) {
            float carY = line * mapHeight;
            float carX = rand.nextFloat() * (screenWidth - 100);
            Obstacle car = new Obstacle(player.context, (int) carX, (int) carY, drawableObstacle);
            car.configureScale(mapHeight, 0.10f);
            car.setScreenWidth(screenWidth);
            obstacles.add(car);
        }
    }

    public void resetAfterDeath() {
        resetObstacles();
        frogLineIndex = 0;
        frogColumnIndex = 2;
        float frogScaledWidth = player.getScaledWidth();
        float frogX = columnsX[frogColumnIndex] - (frogScaledWidth / 2f);
        float frogY = frogLines[frogLineIndex] * mapHeight;
        player.storeInitialPosition((int) frogX, (int) frogY);
        if (listener != null) {
            listener.onButtonsBlocked(false);
        }
    }

    public void update() {
        if (gameWon || gameOver) return;

        player.update();
        for (Obstacle obstacle : obstacles) {
            obstacle.update();
        }

        // Comprobación de colisión con obstáculos.
        if (!player.isDead()) {
            for (Obstacle obstacle : obstacles) {
                if (collisionManager.checkCollision(player, obstacle)) {
                    gam.playerDeath(context);
                    lives--;
                    if (lives > 0) {
                        if (listener != null) listener.onButtonsBlocked(true);
                        player.playDeathAnimation();
                    } else {
                        gameOver = true;
                        if (listener != null) listener.onGameLost();
                    }
                    break;
                }
            }
        }

        // Verificar si se recoge la llave (para niveles con llave).
        if (!player.isDead()) {
            path.checkKeyCollected(player);
        }

        // Comprobación en la zona del camino.
        if (!player.isDead()) {
            float pathTop = pathLines[pathLines.length - 1] * mapHeight;
            float pathBottom = pathLines[0] * mapHeight;
            float frogFootY = player.getBoundingBox().bottom;
            if (frogFootY >= pathTop && frogFootY <= pathBottom && !path.isFrogSafe(player)) {
                lives--;
                if (lives > 0) {
                    if (listener != null) listener.onButtonsBlocked(true);
                    player.playDeathAnimation();
                } else {
                    gameOver = true;
                    if (listener != null) listener.onGameLost();
                }
            }
        }
    }

    public void draw(Canvas canvas) {
        // Dibujar primero el camino seguro.
        if (path != null) {
            path.draw(canvas);
        }
        // Dibujar la rana encima del camino.
        player.draw(canvas);
        // Dibujar los obstáculos encima de la rana.
        for (Obstacle obstacle : obstacles) {
            obstacle.draw(canvas);
        }
    }

    public void movePlayerUp() {
        if (gameWon || gameOver) return;
        if (frogLineIndex < frogLines.length - 1) {
            frogLineIndex++;
            float frogScaledWidth = player.getScaledWidth();
            float frogX = columnsX[frogColumnIndex] - (frogScaledWidth / 2f);
            float frogY = frogLines[frogLineIndex] * mapHeight;
            player.setPosition((int) frogX, (int) frogY);
            player.moveUpSmall();
            if (frogLineIndex == frogLines.length - 1) {
                gameWon = true;
                Log.d(TAG, "¡Victoria! La rana ha llegado arriba.");
                boolean shouldIncrementLevel = (level == userCurrentLevel);
                if (listener != null) listener.onGameWon(shouldIncrementLevel);
            }
        }
    }

    public void movePlayerLeft() {
        if (gameWon || gameOver) return;
        if (frogColumnIndex > 0) {
            frogColumnIndex--;
            float frogScaledWidth = player.getScaledWidth();
            float frogY = player.y;
            float frogX = columnsX[frogColumnIndex] - (frogScaledWidth / 2f);
            player.setPosition((int) frogX, (int) frogY);
            player.moveLeft();
        }
        if(frogColumnIndex < 0){
            gam.wallCollision(context);
        }
    }

    public void movePlayerRight() {
        if (gameWon || gameOver) return;
        if (frogColumnIndex < columnsX.length - 1) {
            frogColumnIndex++;
            float frogScaledWidth = player.getScaledWidth();
            float frogY = player.y;
            float frogX = columnsX[frogColumnIndex] - (frogScaledWidth / 2f);
            player.setPosition((int) frogX, (int) frogY);
            player.moveRight();
        }
        if (frogColumnIndex > 4) {
            gam.wallCollision(context);
        }
    }
}

Juego:
package edu.pmdm.frogger.game;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.util.AttributeSet;
import android.view.SurfaceHolder;
import android.view.SurfaceView;

import edu.pmdm.frogger.R;
import edu.pmdm.frogger.utils.GameAudioManager;

public class Juego extends SurfaceView implements SurfaceHolder.Callback {

    private BucleJuego bucleJuego;
    private GameEngine gameEngine;
    private Bitmap background;
    private boolean positionsConfigured = false;
    private GameAudioManager gam = new GameAudioManager();

    public Juego(Context context, AttributeSet attrs) {
        super(context, attrs);
        getHolder().addCallback(this);
    }

    public void setLevel(int level) {
        int mapResource;
        switch (level) {
            case 1:
                mapResource = R.drawable.map_level1;
                gam.levelOneTheme(getContext());
                gam.idleCroak(getContext());
                gam.carHonks(getContext());
                break;
            case 2:
                mapResource = R.drawable.map_level2;
                gam.levelTwoTheme(getContext());
                gam.idleCroak(getContext());
                gam.carHonks(getContext());
                break;
            case 3:
                mapResource = R.drawable.map_level3;
                gam.levelThreeTheme(getContext());
                gam.idleCroak(getContext());
                gam.carHonks(getContext());
                break;
            default:
                mapResource = R.drawable.map_level1;
                gam.levelOneTheme(getContext());
                gam.idleCroak(getContext());
                gam.carHonks(getContext());
        }
        background = BitmapFactory.decodeResource(getResources(), mapResource);
    }

    public void setGameEngine(GameEngine engine) {
        this.gameEngine = engine;
    }

    @Override
    public void surfaceCreated(SurfaceHolder holder) {
        if (!positionsConfigured && gameEngine != null) {
            int canvasWidth = getWidth();
            int canvasHeight = getHeight();
            configurePositions(canvasWidth, canvasHeight);
            positionsConfigured = true;
        }
        bucleJuego = new BucleJuego(this);
        bucleJuego.setRunning(true);
        bucleJuego.start();
    }

    @Override
    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
    }

    @Override
    public void surfaceDestroyed(SurfaceHolder holder) {
        boolean retry = true;
        bucleJuego.setRunning(false);
        while (retry) {
            try {
                bucleJuego.join();
                retry = false;
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    private void configurePositions(int width, int height) {
        if (gameEngine == null) return;
        int bottomOffset = 300;
        int mapHeight = height - bottomOffset;
        gameEngine.configurePositions(width, mapHeight);
    }

    public void update() {
        if (gameEngine != null) {
            gameEngine.update();
        }
    }

    @Override
    public void draw(Canvas canvas) {
        super.draw(canvas);
        if (canvas == null) return;
        int canvasWidth = canvas.getWidth();
        int canvasHeight = canvas.getHeight();
        int bottomOffset = 300;
        Rect dstRect = new Rect(0, 0, canvasWidth, canvasHeight - bottomOffset);
        if (background != null) {
            canvas.drawBitmap(background, null, dstRect, null);
        }
        if (gameEngine != null) {
            gameEngine.draw(canvas);
        }
    }

    public void movePlayerLeft() {
        if (gameEngine != null) {
            gameEngine.movePlayerLeft();
            gam.playerMovement(getContext());
        }
    }

    public void movePlayerUp() {
        if (gameEngine != null) {
            gameEngine.movePlayerUp();
            gam.playerMovement(getContext());
        }
    }

    public void movePlayerRight() {
        if (gameEngine != null) {
            gameEngine.movePlayerRight();
            gam.playerMovement(getContext());
        }
    }
}

PlayerFrog:

package edu.pmdm.frogger.game;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.RectF;
import android.graphics.drawable.AnimationDrawable;
import android.graphics.drawable.Drawable;
import android.os.SystemClock;

import edu.pmdm.frogger.R;
import edu.pmdm.frogger.utils.GameAudioManager;

public class PlayerFrog extends FroggerObject {

    // Animaciones
    private AnimationDrawable animIdleRight;
    private AnimationDrawable animUp;
    private AnimationDrawable animHorizontal;
    private AnimationDrawable animDeath;

    private AnimationDrawable currentAnim;

    private float scaleFactor = 1.0f;
    private int initX, initY;

    private boolean isDead = false;
    private long deathStartTime;
    private long deathDurationMs = 2500;

    private boolean isPlayingAnim = false;
    private long lastAnimRunTime = 0;
    private int animRunInterval = 150;

    private boolean facingLeft = false;

    public interface DeathAnimationListener {
        void onDeathAnimationFinished();
    }

    private DeathAnimationListener deathAnimationListener;

    public void setDeathAnimationListener(DeathAnimationListener listener) {
        this.deathAnimationListener = listener;
    }

    public PlayerFrog(Context context) {
        super(context);

        Drawable idleDrawable = context.getResources().getDrawable(R.drawable.frogger_idle);
        if (idleDrawable instanceof AnimationDrawable) {
            animIdleRight = (AnimationDrawable) idleDrawable;
        }

        Drawable horizDrawable = context.getResources().getDrawable(R.drawable.frogger_mov);
        if (horizDrawable instanceof AnimationDrawable) {
            animHorizontal = (AnimationDrawable) horizDrawable;
        }

        Drawable upDrawable = context.getResources().getDrawable(R.drawable.frogger_up);
        if (upDrawable instanceof AnimationDrawable) {
            animUp = (AnimationDrawable) upDrawable;
        }

        Drawable deathDrawable = context.getResources().getDrawable(R.drawable.frogger_death);
        if (deathDrawable instanceof AnimationDrawable) {
            animDeath = (AnimationDrawable) deathDrawable;
        }

        setCurrentAnim(animIdleRight);
        facingLeft = false;
    }

    public void configureScale(int mapHeight, float desiredRatio) {
        if (animHorizontal != null) {
            int h = animHorizontal.getIntrinsicHeight();
            float desiredHeight = mapHeight * desiredRatio;
            scaleFactor = (desiredHeight / h) * 1.2f;
        }
    }

    public void storeInitialPosition(int x, int y) {
        initX = x;
        initY = y;
        setPosition(x, y);
        setCurrentAnim(animIdleRight);
        facingLeft = false;
    }

    @Override
    public void update() {
        long now = SystemClock.uptimeMillis();

        if (currentAnim != null && isPlayingAnim && (now - lastAnimRunTime >= animRunInterval)) {
            currentAnim.run();
            lastAnimRunTime = now;
            if (!currentAnim.isRunning()) {
                isPlayingAnim = false;
            }
        }

        if (isDead) {
            long elapsed = now - deathStartTime;
            if (elapsed > deathDurationMs) {
                resetPosition();
                setCurrentAnim(animIdleRight);
                isDead = false;
                isPlayingAnim = false;
                facingLeft = false;
                if (deathAnimationListener != null) {
                    deathAnimationListener.onDeathAnimationFinished();
                }
            }
        }
    }

    @Override
    public void draw(Canvas canvas) {
        if (currentAnim != null && canvas != null) {
            int w = currentAnim.getIntrinsicWidth();
            int h = currentAnim.getIntrinsicHeight();
            w = (int) (w * scaleFactor);
            h = (int) (h * scaleFactor);

            canvas.save();
            if (facingLeft) {
                float centerX = x + w / 2f;
                float centerY = y + h / 2f;
                canvas.scale(-1, 1, centerX, centerY);
            }
            currentAnim.setBounds(x, y, x + w, y + h);
            currentAnim.draw(canvas);
            canvas.restore();
        }
    }

    GameAudioManager gam = new GameAudioManager();

    public void playDeathAnimation() {
        if (animDeath == null) return;
        currentAnim = animDeath;
        currentAnim.stop();
        currentAnim.start();
        isPlayingAnim = true;
        isDead = true;
        deathStartTime = SystemClock.uptimeMillis();
        lastAnimRunTime = 0;
    }

    public void resetPosition() {
        setPosition(initX, initY);
    }

    public float getScaledWidth() {
        if (animHorizontal != null) {
            int w = animHorizontal.getIntrinsicWidth();
            return w * scaleFactor;
        }
        return 0;
    }

    public float getScaledHeight() {
        if (animHorizontal != null) {
            int h = animHorizontal.getIntrinsicHeight();
            return h * scaleFactor;
        }
        return 0;
    }

    public void moveLeft() {
        if (isDead) return;
        facingLeft = true;
        startAnimation(animHorizontal);
    }

    public void moveRight() {
        if (isDead) return;
        facingLeft = false;
        startAnimation(animHorizontal);
    }

    public void moveUpSmall() {
        if (isDead) return;
        y -= 50;
        facingLeft = false;
        startAnimation(animUp);
    }

    private void startAnimation(AnimationDrawable anim) {
        if (anim == null) return;
        currentAnim = anim;
        currentAnim.stop();
        currentAnim.start();
        isPlayingAnim = true;
        lastAnimRunTime = 0;
    }

    private void setCurrentAnim(AnimationDrawable anim) {
        if (anim == null) return;
        currentAnim = anim;
        currentAnim.stop();
        isPlayingAnim = false;
    }

    public boolean isDead() {
        return isDead;
    }

    @Override
    public RectF getBoundingBox() {
        float paddingX = getScaledWidth() * 0.15f;
        float paddingY = getScaledHeight() * 0.15f;
        return new RectF(x + paddingX, y + paddingY, x + getScaledWidth() - paddingX, y + getScaledHeight() - paddingY);
    }

    @Override
    public RectF getBoundingBoxPrecise() {
        float scaledWidth = getScaledWidth();
        float scaledHeight = getScaledHeight();
        float paddingX = scaledWidth * 0.15f;
        float paddingY = scaledHeight * 0.15f;
        return new RectF(x + paddingX, y + paddingY, x + scaledWidth - paddingX, y + scaledHeight - paddingY);
    }

}
