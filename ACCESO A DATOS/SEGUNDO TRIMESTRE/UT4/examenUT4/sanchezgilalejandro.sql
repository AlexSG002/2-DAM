SET SERVEROUTPUT ON

--Ejercicio 1
DROP TYPE TIPO_INFORME;
CREATE OR REPLACE TYPE TIPO_INFORME AS OBJECT (
    CLASE VARCHAR2(10),
    PASAJEROS NUMBER(4),
    TRIPULANTES NUMBER(2),
    SUMAPVP FLOAT
);

--Ejercicio 2
DROP TYPE VARRAY_INFORME;
CREATE OR REPLACE TYPE VARRAY_INFORME AS VARRAY(3) OF TIPO_INFORME;


--Ejercicio 3
DROP TYPE TIPO_VUELO1;
CREATE OR REPLACE TYPE TIPO_VUELO1 AS OBJECT (
    IDENTIFICADOR VARCHAR2(10),
    AEROPUERTO_ORIGEN VARCHAR2(10),
    AEROPUERTO_DESTINO VARCHAR2(10),
    TIPO_VUELO VARCHAR2(15),
    FECHA_VUELO DATE,
    INFORME VARRAY_INFORME,
    
    MEMBER FUNCTION NUMERO_PASAJEROS RETURN NUMBER,
    MEMBER FUNCTION PVP_TOTAL RETURN FLOAT,
    MEMBER FUNCTION PASAJEROS_CLASE(CLASE_BUSCADA VARCHAR2) RETURN NUMBER,
    MEMBER FUNCTION NUMERO_TRIPULANTES RETURN NUMBER
) NOT FINAL;

CREATE OR REPLACE TYPE BODY TIPO_VUELO1 AS
    MEMBER FUNCTION NUMERO_PASAJEROS RETURN NUMBER IS
        TOTAL_PASAJEROS NUMBER := 0;
    BEGIN
        FOR i IN 1..INFORME.COUNT LOOP
            TOTAL_PASAJEROS := TOTAL_PASAJEROS + INFORME(i).PASAJEROS;
        END LOOP;
        RETURN TOTAL_PASAJEROS;
    END NUMERO_PASAJEROS;
    
    MEMBER FUNCTION PVP_TOTAL RETURN FLOAT IS
        TOTAL_PVP FLOAT := 0;
    BEGIN
        FOR i IN 1..INFORME.COUNT LOOP
            TOTAL_PVP := TOTAL_PVP + INFORME(i).SUMAPVP;
        END LOOP;
        RETURN TOTAL_PVP;
    END PVP_TOTAL;
    
    MEMBER FUNCTION PASAJEROS_CLASE(CLASE_BUSCADA VARCHAR2) RETURN NUMBER IS
        PASAJEROS_EN_CLASE NUMBER := 0;
    BEGIN
        FOR i IN 1..INFORME.COUNT LOOP
            IF INFORME(i).CLASE = CLASE_BUSCADA THEN
                PASAJEROS_EN_CLASE := INFORME(i).PASAJEROS;
                EXIT;
            END IF;
        END LOOP;
        RETURN PASAJEROS_EN_CLASE;
    END PASAJEROS_CLASE;
    
    MEMBER FUNCTION NUMERO_TRIPULANTES RETURN NUMBER IS
        TOTAL_TRIPULANTES NUMBER := 0;
    BEGIN 
        FOR i IN 1..INFORME.COUNT LOOP
            TOTAL_TRIPULANTES := TOTAL_TRIPULANTES + INFORME(i).TRIPULANTES;
        END LOOP;
        RETURN TOTAL_TRIPULANTES;
    END NUMERO_TRIPULANTES;
END;

-- Ejercicio 4
DROP TABLE TABLA_VUELO1;
CREATE TABLE TABLA_VUELO1 OF TIPO_VUELO1 (
  CONSTRAINT pk_vuelo PRIMARY KEY (IDENTIFICADOR)
);

-- Ejercicio 5
INSERT INTO TABLA_VUELO1 VALUES (
  'V001',
  'MAD',
  'BCN',
  'Comercial',
  TO_DATE('2025-03-01','YYYY-MM-DD'),
  VARRAY_INFORME(
    TIPO_INFORME('PRIMERA', 10, 2, 1500),
    TIPO_INFORME('TURISTA', 100, 2, 3000),
    TIPO_INFORME('BUSINESS', 20, 2, 2500)
  )
);
COMMIT;

-- Ejercicio 6a
SELECT V.IDENTIFICADOR,
       V.NUMERO_PASAJEROS() AS TOTAL_PASAJEROS,
       V.PVP_TOTAL() AS TOTAL_PVP
FROM TABLA_VUELO1 V;

-- Ejercicio 6b
SELECT V.IDENTIFICADOR,
       V.PASAJEROS_CLASE('BUSINESS') AS PASAJEROS_BUSINESS
FROM TABLA_VUELO1 V;

-- Ejercicio 7
DROP TYPE OBJ_PASAJERO FORCE;
CREATE OR REPLACE TYPE OBJ_PASAJERO AS OBJECT (
    COD NUMBER,
    NOMBRE VARCHAR2(30),
    TLF VARCHAR2(10),
    DIRECCION VARCHAR2(40),
    PAIS VARCHAR2(15)
);


DROP TABLE TABLA_OBJ_PASAJERO;
CREATE TABLE TABLA_OBJ_PASAJERO OF OBJ_PASAJERO (
    PRIMARY KEY (COD)
);

INSERT INTO TABLA_OBJ_PASAJERO
  SELECT * FROM PASAJERO;
COMMIT;

DROP TYPE TIPO_PASAJE FORCE;
CREATE OR REPLACE TYPE TIPO_PASAJE AS OBJECT (
    ASIENTO NUMBER,
    CLASE   VARCHAR2(10),
    PVP     FLOAT,
    PASAJERO_COD REF OBJ_PASAJERO
);

DROP TYPE TIPO_PASAJE_NT FORCE;
CREATE OR REPLACE TYPE TIPO_PASAJE_NT AS TABLE OF TIPO_PASAJE;

DROP TYPE TIPO_PASAJERO_NT FORCE;
CREATE OR REPLACE TYPE TIPO_PASAJERO_NT AS TABLE OF OBJ_PASAJERO;

DROP TYPE TIPO_VUELO2 FORCE;
CREATE OR REPLACE TYPE TIPO_VUELO2 AS OBJECT (
    IDENTIFICADOR       VARCHAR2(10),
    AEROPUERTO_ORIGEN   VARCHAR2(10),
    AEROPUERTO_DESTINO  VARCHAR2(10),
    TIPO_VUELO          VARCHAR2(15),
    FECHA_VUELO         DATE,
    PASAJES             TIPO_PASAJE_NT,
    
    --Ejercicio 8
    MEMBER FUNCTION PASAJERO_ASIENTO(p_asiento NUMBER) RETURN OBJ_PASAJERO,
    --Ejercicio 9
    MEMBER FUNCTION PASAJEROS_CLASE(p_clase VARCHAR2) RETURN TIPO_PASAJERO_NT
);

CREATE OR REPLACE TYPE BODY TIPO_VUELO2 AS

    MEMBER FUNCTION PASAJERO_ASIENTO(p_asiento NUMBER) RETURN OBJ_PASAJERO IS
        v_pasajero OBJ_PASAJERO;
        v_ref      REF OBJ_PASAJERO;
    BEGIN
        FOR i IN 1..PASAJES.COUNT LOOP
            IF PASAJES(i).ASIENTO = p_asiento THEN
                v_ref := PASAJES(i).PASAJERO_COD;
                SELECT DEREF(v_ref) INTO v_pasajero FROM DUAL;
                RETURN v_pasajero;
            END IF;
        END LOOP;
        RETURN NULL;
    END PASAJERO_ASIENTO;
    
    MEMBER FUNCTION PASAJEROS_CLASE(p_clase VARCHAR2) RETURN TIPO_PASAJERO_NT IS
        v_pasajeros TIPO_PASAJERO_NT := TIPO_PASAJERO_NT();
        v_pasajero  OBJ_PASAJERO;
        v_ref       REF OBJ_PASAJERO;
    BEGIN
        FOR i IN 1..PASAJES.COUNT LOOP
            IF UPPER(PASAJES(i).CLASE) = UPPER(p_clase) THEN
                v_ref := PASAJES(i).PASAJERO_COD;
                SELECT DEREF(v_ref) INTO v_pasajero FROM DUAL;
                v_pasajeros.EXTEND;
                v_pasajeros(v_pasajeros.COUNT) := v_pasajero;
            END IF;
        END LOOP;
        RETURN v_pasajeros;
    END PASAJEROS_CLASE;

END;




--Ejercicio 10
DROP TABLE TABLA_VUELO2;
CREATE TABLE TABLA_VUELO2 OF TIPO_VUELO2 (
  CONSTRAINT pk_vuelo2 PRIMARY KEY (IDENTIFICADOR)
  
) NESTED TABLE PASAJES STORE AS PASAJES_NT;


    INSERT INTO TABLA_VUELO2
    SELECT 
      IDENTIFICADOR,
      AEROPUERTO_ORIGEN,
      AEROPUERTO_DESTINO,
      TIPO_VUELO,
      FECHA_VUELO,
      TIPO_PASAJE_NT()
    FROM VUELO;
    COMMIT;

DECLARE
  v_pasajes TIPO_PASAJE_NT;
  v_ref     REF OBJ_PASAJERO;
BEGIN

  FOR r IN (SELECT IDENTIFICADOR FROM TABLA_VUELO2) LOOP
    v_pasajes := TIPO_PASAJE_NT();
    FOR p IN (SELECT * FROM PASAJE WHERE IDENTIFICADOR = r.IDENTIFICADOR ORDER BY NUMASIENTO) LOOP
      SELECT REF(obj) INTO v_ref
      FROM TABLA_OBJ_PASAJERO obj
      WHERE obj.COD = p.PASAJERO_COD;
      
      v_pasajes.EXTEND;
      v_pasajes(v_pasajes.COUNT) := TIPO_PASAJE(p.NUMASIENTO, p.CLASE, p.PVP, v_ref);
    END LOOP;
    
    UPDATE TABLA_VUELO2 v
    SET v.PASAJES = v_pasajes
    WHERE v.IDENTIFICADOR = r.IDENTIFICADOR;
  END LOOP;
  COMMIT;
END;



--Ejercicio 11
SELECT 
    t.IDENTIFICADOR,
    CASE 
      WHEN t.PASAJERO_ASIENTO(10) IS NULL THEN 'NO HAY'
      ELSE t.PASAJERO_ASIENTO(10).NOMBRE
    END AS NOMBRE_PASAJERO
FROM TABLA_VUELO2 t;


--Ejercicio 12
DROP TABLE TRIPULANTE_REL;
CREATE TABLE TRIPULANTE_REL (
    IDENTIFICADOR_VUELO VARCHAR2(10),
    NOMBRE              VARCHAR2(50),
    FECHA_VALIDEZ       DATE
);

INSERT INTO TRIPULANTE_REL VALUES ('IBE-762', 'HECTOR ROBLES',   SYSDATE + 30);
INSERT INTO TRIPULANTE_REL VALUES ('IBE-762', 'MARIA HERNANDEZ',  SYSDATE + 60);
INSERT INTO TRIPULANTE_REL VALUES ('IBE-762', 'PATRICIA DE MARCOS', SYSDATE + 90);
INSERT INTO TRIPULANTE_REL VALUES ('IBE-762', 'JUAN MARTIN',      SYSDATE - 10);
COMMIT;


CREATE OR REPLACE PROCEDURE ListadoTripulantes(p_identificador IN VARCHAR2) IS
BEGIN
    DBMS_OUTPUT.PUT_LINE('IDENTIFICADOR: ' || p_identificador);
    DBMS_OUTPUT.PUT_LINE(' ****** TRIPULANTE CON VALIDEZ DE TITULO:');
    FOR r IN (
        SELECT NOMBRE FROM TRIPULANTE_REL 
         WHERE IDENTIFICADOR_VUELO = p_identificador 
           AND FECHA_VALIDEZ >= SYSDATE
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('        ' || r.NOMBRE);
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('IDENTIFICADOR: ' || p_identificador);
    DBMS_OUTPUT.PUT_LINE(' ****** TRIPULANTE CON TITULO CADUCADO:');
    FOR r IN (
        SELECT NOMBRE FROM TRIPULANTE_REL 
         WHERE IDENTIFICADOR_VUELO = p_identificador 
           AND FECHA_VALIDEZ < SYSDATE
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('        ' || r.NOMBRE);
    END LOOP;
END;

BEGIN
    ListadoTripulantes('IBE-762');
END;

--Ejercicio 13

CREATE OR REPLACE PROCEDURE Listado(
    p_identificador IN VARCHAR2,
    p_clase         IN VARCHAR2
) IS
    v_vuelo     TIPO_VUELO2;
    v_pasajeros TIPO_PASAJERO_NT;
BEGIN

    SELECT VALUE(v)
      INTO v_vuelo
      FROM TABLA_VUELO2 v
     WHERE v.IDENTIFICADOR = p_identificador;
    
    DBMS_OUTPUT.PUT_LINE('IDENTIFICADOR: ' || p_identificador);
    DBMS_OUTPUT.PUT_LINE(' ****** CLASE: ' || p_clase);
    

    v_pasajeros := v_vuelo.PASAJEROS_CLASE(p_clase);
    
    IF v_pasajeros IS NULL OR v_pasajeros.COUNT = 0 THEN
        DBMS_OUTPUT.PUT_LINE('        NO HAY PERSONAS');
    ELSE
        FOR i IN 1..v_pasajeros.COUNT LOOP
            DBMS_OUTPUT.PUT_LINE('        ' || v_pasajeros(i).NOMBRE);
        END LOOP;
    END IF;
    
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No se encontró el vuelo con identificador ' || p_identificador);
END;


BEGIN
    Listado('IBE-762', 'TURISTA');
    Listado('BRU-1234', 'BUSINESS');
END;



